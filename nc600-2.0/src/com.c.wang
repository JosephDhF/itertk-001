//////////////////////////////////////////////////////////////////////////
///    COPYRIGHT NOTICE
///    Copyright (c) 2010, 浙江共创技术有限公司
///    All rights reserved.
///
/// @file   com.c
/// @brief  串口处理
///
///
///
/// @version    2.0
/// @author     xuliang<gxuliang@gmail.com>
/// @date       2010-05-05
///
///
///     修订说明：最初版本
//////////////////////////////////////////////////////////////////////////

#include "com.h"
#include "config.h"
#include "mode.h"
#include "thread.h"

static int gcomfd[MAX_COM_PORT] = {0,};

//////////////////////////////////////////////////////////////////////////
///
///     串口打开
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-05
//////////////////////////////////////////////////////////////////////////
static void com_dev_open(void)
{
    int i;
    char name[32] = "";

    FOR(i, MAX_COM_PORT)//n32926  ttyS0
    {
        sprintf(name, "%s%d", TTY_DEV, i);
        gcomfd[i] = open(name, O_RDWR |O_NONBLOCK|O_NOCTTY);
        
	if (gcomfd[i]>0){
		printf("name is [%s], gcomfd[%d] = %d\n", name, i, gcomfd[i]);
		fcntl(gcomfd[i], F_SETFL, 0);	
	}else
		printf("Unable to open : %s\n", name);
		
    }
}

//////////////////////////////////////////////////////////////////////////
///
///     设置串口波特率
///     @param fd 串口文件描述符
///     @param speed 波特率
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-11
//////////////////////////////////////////////////////////////////////////
static int setTTYSpeed(int i, int fd, int speed)
{
	if (fd <= 0)
		return -1;

	struct termios options;
	bzero(&options, sizeof(options));
	tcgetattr(fd, &options);
	
	printf("fd = %d, speed is %d\n", fd, speed);
	
	switch (speed)
	{
		case 1200:
			cfsetispeed(&options, B1200);
			cfsetospeed(&options, B1200);
		break;
		case 2400:
			cfsetispeed(&options, B2400);
			cfsetospeed(&options, B2400);
		break;
		case 4800:
			cfsetispeed(&options, B4800);
			cfsetospeed(&options, B4800);
		break;
		case 9600:
			cfsetispeed(&options, B9600);
			cfsetospeed(&options, B9600);
		break;
		case 19200:
			cfsetispeed(&options, B19200);
			cfsetospeed(&options, B19200);
		break;
		case 38400:
			cfsetispeed(&options, B38400);
			cfsetospeed(&options, B38400);
		break;
		case 57600:
			cfsetispeed(&options, B57600);
			cfsetospeed(&options, B57600);
		break;
		case 115200:
			cfsetispeed(&options, B115200);
			cfsetospeed(&options, B115200);
		break;
		default:
			cfsetispeed(&options, B115200);
			cfsetospeed(&options, B115200);
			printf(" XXX : why me? I am Default Case! speed = %d\n",speed);
		break;
	}
	
	int ret = tcsetattr(fd, TCSANOW, &options);
	if (ret !=0)
		printf("ret = %d\n", ret);
	tcflush( fd, TCIOFLUSH );
	return 1;
}

//////////////////////////////////////////////////////////////////////////
///
///     设置串口波特率
///     @param fd 串口文件描述符
///     @param databits 数据位
///     @param parity 校验位
///     @param stopbits 停止位
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-11
//////////////////////////////////////////////////////////////////////////
static int setTTYParity(int i, int fd, int databits, int parity, int stopbits)
{
	if (fd <= 0)
	return -1;

	struct termios options;
	bzero(&options, sizeof(options));
	tcgetattr(fd, &options);

	options.c_cflag &= ~CSIZE;
	switch (databits)
	{
		case 5:
		//todo
		options.c_cflag |= CS5; 
		break;
		case 6:
		//todo
		options.c_cflag |= CS6; 
		break;
		case 7:
		options.c_cflag |= CS7; 
		break;
		case 8:
		options.c_cflag |= CS8; 
		break;
		default:
			printf("com_params_set: data bits value[%d] is illegal!\n", databits);
		return -1;
	}

	switch (parity)
	{
		case 3://无
			options.c_cflag &= ~PARENB;
			options.c_cflag &= ~PARODD;
			options.c_iflag &= ~(INPCK | ISTRIP);
		break;
		case 2://奇
			options.c_cflag |= (PARODD | PARENB);
			options.c_iflag |= (INPCK | ISTRIP);
		break;
		case 1://偶
			options.c_cflag |= PARENB;
			options.c_cflag &= ~PARODD;
			options.c_iflag |= (INPCK | ISTRIP);
		break;
		default:
			printf("com_params_set: parity value[%d] is illegal!\n", parity);
		return -2;
	}

	//set stop bits
	switch (stopbits)
	{
		case 1:
			options.c_cflag &= ~CSTOPB;
		break;
		case 2:
			options.c_cflag |= CSTOPB;
		break;
		default:
			printf("com_params_set: stop bits value[%d] is illegal!\n", stopbits);
		return -3;
	}

	/*使能接收*/
	options.c_cflag |= (CLOCAL | CREAD);
#if 0
	/*选择经典输入模式--与用户交互时使用*/
	options.c_lflag |= (ICANON | ECHO | ECHOE);
#else	
	/*选择原始输入模式*/
	options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
#endif

#if 0
	/*选择加工过的输出*/
	options.c_oflag |= OPOST;
#else
	/*选择原始输出*/
	options.c_oflag &= ~OPOST;
#endif

	tcflush(fd,TCIFLUSH);
	
	//options.c_cc[VTIME] = 10;
	//options.c_cc[VMIN] = 0;
	
	if (tcsetattr(fd,TCSANOW,&options) != 0)   
	{ 
		perror("SetupSerial ");   
		return -4;  
	} 
	
	return 1;

}

//////////////////////////////////////////////////////////////////////////
///
///     串口参数设置
///     @param fd 串口文件描述符
///     @param con_com 参数结构体
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-05
//////////////////////////////////////////////////////////////////////////
void com_para_set(int fd, CONFIG_COM *con_com)
{
    if(fd > 0)
    {
        setTTYSpeed(con_com->id - 1, fd, con_com->bps);
        setTTYParity(con_com->id - 1, fd, con_com->dbit, con_com->chk, con_com->sbit);
    }
}

//////////////////////////////////////////////////////////////////////////
///
///     串口收数据线程
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-05
//////////////////////////////////////////////////////////////////////////
static void com_proc(void* arg)
{
    CONFIG_COM *con_com = (CONFIG_COM*)arg;
    fd_set m_readfds;
   int i=0;
   int cnt=0;
    char lsbuf[1024];
	printf("com_proc :id = %d\n", con_com->id);
	while(1)
	{
		printf("reading...\n");
		memset(lsbuf, 0, 1024);
		//   int len = read(gcomfd[con_com->id - 1], lsbuf, 1024);
		int len = read(gcomfd[con_com->id - 1], lsbuf, 10);
		printf("cnt= %d,com recv :len = %d\n", ++cnt, len);
		for (i=0;i<10;i++)
		{
			printf("%02x ",lsbuf[i]);
			if ((i+1)%10==0)
			printf("\n");
		}
		
		SendComDataToNet(con_com->id - 1, lsbuf, len);
	}
    while(1)
    {
        FD_ZERO(&m_readfds);
        FOR(i, MAX_COM_PORT)
        {
            if(gcomfd[i] > 0)
                FD_SET(gcomfd[i], &m_readfds);
        }
        int ret = select(gcomfd[MAX_COM_PORT - 1] + 1, &m_readfds, NULL, NULL, NULL);
        if(ret <= 0)
            continue;
        FOR(i, MAX_COM_PORT)
        {
            if(FD_ISSET(gcomfd[i], &m_readfds))
            {
                int len = read(gcomfd[i], lsbuf, 1024);
                //printf("i = %d,len = %d\n", i, len);
                SendComDataToNet(i, lsbuf, len);
            }
        }
    }
    
}

//////////////////////////////////////////////////////////////////////////
///
///     串口初始化
///     @param argc 参数个数
///     @param *argv[] 参数内容
///     @return always 0
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-05
//////////////////////////////////////////////////////////////////////////
void com_init(void)
{
    TRD_t com_trd[MAX_COM_PORT];
    int i;
    CONFIG_COM *con_com = g_conf_info.con_com;
    com_dev_open();
    FOR(i, MAX_COM_PORT)
    {
        //printf("i = %d\n", i);
        com_para_set(gcomfd[i], &con_com[i]);
    }
    FOR(i, MAX_COM_PORT)
        trd_create(&com_trd[i], (void*)&com_proc, &con_com[i]);
}

void com_set(CONFIG_COM *con_com)
{
    //printf("con_com->id= %d\n",con_com->id);
    com_para_set(gcomfd[con_com->id - 1], con_com);
}

//////////////////////////////////////////////////////////////////////////
///
///     串口数据发送
///     @param id 串口序号
///     @param *data 数据首地址
///     @param len 数据长度
///     @author     xuliang<gxuliang@gmail.com>
///     @date       2010-05-05
//////////////////////////////////////////////////////////////////////////
inline int SendNetDataToCom(int id, void *data, int len)
{
    return writen(gcomfd[id], data, len);
}

